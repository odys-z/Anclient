{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/app/App.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C","file":"app-0.1.0.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","// import React from \"react\";\n//\n// import Paper from \"@material-ui/core/Paper\";\n// import Button from \"@material-ui/core/Button\";\n// import Answer from \"./components/Answer/Answer\";\n// import Result from \"./components/Result/Result\";\n// import QuestionParagraph from \"./components/Question/Question.js\";\n// import addCssTransition from \"./utils/css-transition\";\n// import { withStyles, MuiThemeProvider } from \"@material-ui/core/styles\";\n//\n// import logo from \"../assets/logo.svg\";\n// import theme from \"./styles/theme\";\n// import styles from \"./app-style\";\n//\n// import CircularLoading from \"./components/CircularLoading\";\n//\n// class App extends React.Component {\n//     lastTimeButtonClicked = new Date().getTime();\n//\n//     state = {\n//         questions: null,\n//         result: null,\n//         questionsAnswers: [],\n//         currentQuestionIndex: 0,\n//\n//         check0: false,\n//         check1: false\n//     };\n//\n//     componentDidUpdate(prevProps, prevState) {\n//         this.updateButtonsPos();\n//\n//         setTimeout(() => {\n//             this.updateButtonsPos();\n//         }, 0);\n//     }\n//\n//     /**Setup window events handlling for updating button postion.*/\n//     componentDidMount() {\n//         window.onorientationchange = () => this.updateButtonsPos();\n//         window.onresize = () => this.updateButtonsPos();\n//\n//         questionsFactory(false).then(value => {\n//             this.setState({ questions: value }, () => {\n//                 this.updateButtonsPos();\n//             });\n//         });\n//\n//         this.updateButtonsPos();\n//\n//         setTimeout(() => {\n//             this.updateButtonsPos();\n//         }, 0);\n//     }\n//\n//     onNextClick = e => {\n//         const currentState = this.state;\n//\n//         if (currentState.currentQuestionIndex === currentState.questions.length - 1 || this.areButtonsAnimating()) {\n//             return;\n//         }\n//\n//         console.log(currentState.currentQuestionIndex);\n//         this.updatePage(++currentState.currentQuestionIndex);\n//     };\n//\n//     onPrevClick = e => {\n//         const currentState = this.state;\n//\n//         if (currentState.currentQuestionIndex === 0 || this.areButtonsAnimating()) {\n//             return;\n//         }\n//\n//         this.updatePage(--currentState.currentQuestionIndex);\n//     };\n//\n//     onSubmitClick = async () => {\n//         const currentState = this.state;\n//\n//         this.setState({\n//             questions: null,\n//             questionsAnswers: [],\n//             currentQuestionIndex: 0\n//         });\n//\n//         let result = await submitFactory(null, currentState.questions, currentState.questionsAnswers);\n//         this.setState({\n//             result\n//         });\n//     };\n//\n//     onTryAgainPressed = async () => {\n//         this.setState({\n//             questions: null,\n//             questionsAnswers: [],\n//             currentQuestionIndex: 0,\n//             result: null\n//         });\n//\n//         this.setState({\n//             questions: await getQuestions()\n//         })\n//     };\n//\n//     onAnswerSelected = answerId => {\n//         let clickedAnswerIndex = answerId;\n//         let currentState = this.state;\n//         const currentAnswers = this.state.questionsAnswers;\n//         currentAnswers[currentState.currentQuestionIndex] = clickedAnswerIndex;\n//\n//         this.setState({\n//             userAnswerIndexes: currentAnswers\n//         });\n//     };\n//\n//     updateButtonsPos = () => {\n//         if (!this.questionsLoaded()) {\n//             return false;\n//         }\n//\n//         let buttons = Array.from(document.getElementById(\"buttonsContainer\").children);\n//         let mainContainer = document.getElementById(\"mainContainer\");\n//\n//         buttons.forEach(button => {\n//             button.children[0].style.bottom = \"0px\";\n//         });\n//\n//         const bottomPosition = mainContainer.clientHeight - mainContainer.scrollHeight + 20;\n//\n//         buttons.forEach(button => {\n//             button.children[0].style.bottom = bottomPosition + \"px\";\n//         });\n//     };\n//\n//     updatePage = questionIndex => {\n//         this.lastTimeButtonClicked = new Date().getTime();\n//         document.getElementById(\"mainContainer\").scrollTop = 0;\n//         this.setState({\n//             currentQuestionIndex: questionIndex\n//         });\n//     };\n//\n//     questionsLoaded = () => (this.state.questions !== null ? true : false);\n//     getCurrentQuestion = () => this.state.questions[this.state.currentQuestionIndex].question;\n//     getCurrentAnswers = () => this.state.questions[this.state.currentQuestionIndex].answers;\n//     isAnswerSelected = answerIndex => this.state.questionsAnswers[this.state.currentQuestionIndex] === answerIndex;\n//     shouldShowSubmit = () =>\n//         this.state.currentQuestionIndex === this.state.questions.length - 1 &&\n//         this.state.questionsAnswers[this.state.questions.length - 1] !== undefined;\n//     shouldShowNext = () =>\n//         this.state.currentQuestionIndex !== this.state.questions.length - 1 &&\n//         this.state.questionsAnswers[this.state.currentQuestionIndex] !== undefined;\n//     shouldShowPrev = () => false; // this.state.currentQuestionIndex !== 0;\n//     areButtonsAnimating = () => {\n//         const transitionTime = 600;\n//         const currentTime = new Date().getTime();\n//\n//         return currentTime - transitionTime <= this.lastTimeButtonClicked;\n//     };\n//\n//     render() {\n//         const { classes } = this.props;\n//\n//         return (\n//             <MuiThemeProvider theme={theme}>\n//                 {addCssTransition(\n//                     <Paper id=\"mainContainer\" className={classes.paper} elevation={2}>\n//                         <img key={\"logo\"} src={logo} className={classes.logo} alt=\"logo\" />\n//                         <hr key={\"horizontalLine\"} width={\"100%\"} />\n//                         {this.questionsLoaded() && this.state.result == null ? (\n//                             <div>\n//                                 {addCssTransition(\n//                                     <div key={this.getCurrentQuestion()}>\n//                                         <QuestionParagraph\n//                                             question={this.getCurrentQuestion()}\n//                                             questionIndex={this.state.currentQuestionIndex + 1}\n//                                             questionsLength={this.state.questions.length} />\n//\n//                                         <div className={classes.answerContainer}>\n//                                             {this.getCurrentAnswers().map((currentAnswer, index) => (\n//                                                 <Answer\n//                                                     answerIndex={index}\n//                                                     key={this.getCurrentQuestion() + index}\n//                                                     answer={currentAnswer}\n//                                                     isSelected={this.isAnswerSelected(index)}\n//                                                     onAnswerSelect={this.onAnswerSelected} />\n//                                             ))}\n//                                         </div>\n//\n//                                         <div id=\"buttonsContainer\">\n//                                             {this.shouldShowSubmit()\n//                                                 ? addCssTransition(\n//                                                       <Button\n//                                                           variant=\"contained\"\n//                                                           className={classes.btnSubmit}\n//                                                           onClick={this.onSubmitClick}\n//                                                           color=\"primary\"\n//                                                       >\n//                                                           Submit\n//                                                       </Button>\n//                                                   )\n//                                                 : null}\n//\n//                                             {this.shouldShowNext()\n//                                                 ? addCssTransition(\n//                                                       <Button\n//                                                           variant=\"contained\"\n//                                                           className={classes.btnNext}\n//                                                           onClick={this.onNextClick}\n//                                                           color=\"primary\"\n//                                                       >\n//                                                           Next\n//                                                       </Button>\n//                                                   )\n//                                                 : null}\n//\n//                                             {this.shouldShowPrev()\n//                                                 ? addCssTransition(\n//                                                       <Button\n//                                                           variant=\"contained\"\n//                                                           className={\n//                                                               this.shouldShowSubmit()\n//                                                                   ? classes.btnPrevSubmit\n//                                                                   : classes.btnPrev\n//                                                           }\n//                                                           onClick={this.onPrevClick}\n//                                                           color=\"primary\"\n//                                                       >\n//                                                           Prev\n//                                                       </Button>\n//                                                   )\n//                                                 : null}\n//                                         </div>\n//                                     </div>\n//                                 )}\n//                             </div>\n//                         ) : this.state.result !== null ? (\n//                             addCssTransition(\n//                                 <Result result={this.state.result} tryAgainPressed={this.onTryAgainPressed} />\n//                             )\n//                         ) : (\n//                             <CircularLoading key={\"loadingCircle\"} />\n//                         )}\n//                     </Paper>\n//                 )}\n//             </MuiThemeProvider>\n//         );\n//     }\n// }\n//\n// export default withStyles(styles)(App);\n"],"sourceRoot":""}